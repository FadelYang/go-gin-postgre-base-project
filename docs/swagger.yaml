basePath: /api/v1
definitions:
  common.BaseResponse-dto_ExampleDTO:
    properties:
      data:
        $ref: '#/definitions/dto.ExampleDTO'
      message:
        type: string
      status:
        type: integer
    type: object
  common.BaseResponse-dto_UserDTO:
    properties:
      data:
        $ref: '#/definitions/dto.UserDTO'
      message:
        type: string
      status:
        type: integer
    type: object
  dto.CreateExample:
    properties:
      name:
        example: Bakwan Jagung
        type: string
    required:
    - name
    type: object
  dto.CreateUser:
    properties:
      email:
        example: budipambudi@gmail.com
        type: string
      password:
        example: supersecretpassword
        type: string
      username:
        example: Budi Pambudi
        type: string
    type: object
  dto.ExampleDTO:
    properties:
      id:
        example: a53515e3-5a7f-440b-82f6-3d84ac7ce746
        type: string
      name:
        example: Bakwan Jagung
        type: string
    type: object
  dto.UpdateUser:
    properties:
      email:
        example: budipambudi@gmail.com
        type: string
      username:
        example: Budi Pambudi
        type: string
    type: object
  dto.UserDTO:
    properties:
      created_at:
        example: "1617181723"
        type: string
      email:
        example: budipambudi@gmail.com
        type: string
      id:
        example: a53515e3-5a7f-440b-82f6-3d84ac7ce746
        type: string
      updated_at:
        example: "1617181723"
        type: string
      username:
        example: Budi Pambudi
        type: string
    type: object
info:
  contact: {}
  description: Go, Gin, and Postgre Base Project
  title: Go, Gin, and Postgre Base Project
  version: "1.0"
paths:
  /examples:
    get:
      consumes:
      - application/json
      description: get all example data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.BaseResponse-dto_ExampleDTO'
      summary: Get Example
      tags:
      - examples
    post:
      consumes:
      - application/json
      description: create an example
      parameters:
      - description: request body for create an example [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateExample'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.BaseResponse-dto_ExampleDTO'
      summary: Post Example
      tags:
      - examples
  /users:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.BaseResponse-dto_UserDTO'
      summary: Get Users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create an user
      parameters:
      - description: request body for create an user [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.BaseResponse-dto_UserDTO'
      summary: Create User
      tags:
      - users
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete an user
      parameters:
      - description: UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.BaseResponse-dto_UserDTO'
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Find user by id
      parameters:
      - description: UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.BaseResponse-dto_UserDTO'
      summary: Find User By Its UUID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update an user
      parameters:
      - description: UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: request body for update an example [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.BaseResponse-dto_UserDTO'
      summary: Update User
      tags:
      - users
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Find user by email
      parameters:
      - description: User Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.BaseResponse-dto_UserDTO'
      summary: Find User By Its Email
      tags:
      - users
swagger: "2.0"
